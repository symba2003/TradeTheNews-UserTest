у меня есть набор задач, их можно поделить на 2 типа. 
первый тип, скажем main - это сложные задачи, они долго выполняются и пока они выполняются, 2й тип задач не должен выполняться
второй тип - вспомогательные. их может быть запущенно сколько угодно в один момент времени

в java есть расширенный ReentrantReadWriteLock

я могу блокировать на чтение (монитор может быть захвачен сколькими угодно потоками)
и могу блокировать на запись (тогда монитор может захватить только один поток и "читатели" не могут его захватить)

для своей задачи я применил все-таки другую технику, а для твоей - такое вполне подойдет.

Решение этой задачи: JavaObserver.java

Комментарии к решению:

Почитала про ReaderWriterLock, в том числе:
ReaderWriterLock works best where most accesses are reads, while writes are infrequent and of short duration. Multiple readers alternate with single writers, so that neither readers nor writers are blocked for long periods.
он идеально подходит для моей задачи про UserRepository..спасибо за наводку!

По поводу того кода, который ты скинул (JobObserver): 
интересная задача и ее решение.

в нем используется  ReentrantLock, а не ReentrantReadWriteLock (о чем ты предупредил)
судя по названию - это блокировка, которая может исп-ся рекурсивно (то есть внее можно "перезайти"), верно?
ОТВЕТ: да. в java (и насколько я помню, в c#) - все блокировки реентерантные. нереентерантных нет.
кстати... fyi
reentrant lock - re-entrant, 
re-entered
если поток захватил монитор, то он может его захватывать снова и снова.
но он должен будет его освободить ровно столько раз, сколько захватил
(да-да..незабываем про блоки finally (unlock()))

не совсем понятна схема работы Condition deltasExists.
Вызов deltasExists.await(); в методе awaitForDeltasCompletion приостанавливает текущий thread, пока не будет вызыван
deltasExists.signal(); из setDeltaFinished? верно?
И тогда, если deltaCounter == 0, то цикл while(true) - завершается..а, значит, initial thread может быть запущен..так?
ОТВЕТ: да